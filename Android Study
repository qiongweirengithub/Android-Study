Android
API 级别：标识 API 框架的整数；
开发环境：
  1. java jdk;
  2. android sdk;
  3. jre;
      jre: java runtime , jdk一般都包含 jre
  4. android studio;
  
android 架构：
  5 个部分， 4个层次
  layer:
    1. linux kernel
        1. display driver
        2. camera driver
        3. bluetooth driver
        4. ...
        ...
    2. libraries: 程序库的集合，浏览器引擎，存储数据库引擎，网络安全，。。
                   ->     基于java的 android 开发程序库，应用程序框架，如用户界面构建，数据库访问等等。
      .1
          1. surface Manager
          2. media Framwork
          3. SQLLite
          4. openGLES
          5. FreeType
          6. LibWebCore
          7. SGL
          8. SSL
          9. Libe
      .2
          1. core Lib
          2. david vitual machine
    
    3. Application FrameWork   
       1. Activity Manager
       2. window Manager
       3. Control Providers
       4. View System
       5. Notification System
       6. Package Manager
       7. Telephony Manager
       8. Resource Manager
       9. Location Manager
       10. XMPP server
       
   4. Applications
       1. Home
       2. Dialer
       3. SMS/MMS
       4. IM
       5. Browser
       6. Camera
       7. Alarm
       8. Calulater
       9. Contacts
       10.Voice Dial
       11.Email
       12.Calendar
       13.MediaPlayer
       14.Album
       15.clock
       ...
       
android librories:
      1. android.app            ->   提供应用程序模型的访问，是android 应用的基础。
      2. android.contend        ->   应用程序之间和应用程序组建之间内容访问，消息传递
      3. android.database
      4. android.openGL
      5. android.os             ->   应用访问标注操作系统服务的能力，消息，系统服务，进程间通信
      6. android.text           ->   设备显示上渲染和操作文本
      7. android.view           ->   应用程序用户界面的基础构件
      8. android.widget         ->   用户界面组建的组合，按钮，标签，列表，布局管理，
      9. android.webkit         ->   一些列类的集合，提供内建的 web 访问能力
       
  
应用框架:
    以 java 类的形式 为应用程序提供的高级服务，开发者可以使用这些服务
    1. 活动管理者，控制应用程序社工匿名周期和活动栈的所有方面
    2. 内容提供者，允许程序之间发布和共享数据
    3. 资源管理器，非 代码嵌入 资源的访问，字符串，颜色，用户界面布局
    4. 通知管理器，显示通话框或者通知给用户
    5. 视图系统，可扩展的试图集合，用于创建
       
       
android 组件
  应用程序的基本构建块，组件是有应用清单文件松耦合组织的，AndroidManifest.xml --> 组件和交互
  四个主要组件：
      Activities: UI 描述，处理用户于屏幕的交互
      Service   : 与应用程序关联的后台操作
      Brocast Receives: 操作系统与应用之间的通信。
      Content Providers:  处理数据和数据库方面的东西。
      
      
      
android  activity:  
        活动代表了一个具有用户界面的单一屏幕，如 Java 的窗口或者帧。Android 的活动是 ContextThemeWrapper 类的子类
        onCreate()	这是第一个回调，在活动第一次创建是调用
        onStart()	这个回调在活动为用户可见时被调用
        onResume()	这个回调在应用程序与用户开始可交互的时候调用
        onPause()	被暂停的活动无法接受用户输入，不能执行任何代码。当当前活动将要被暂停，上一个活动将要被恢复是调用
        onStop()	当活动不在可见时调用
        onDestroy()	当活动被系统销毁之前调用
        onRestart()	当活动被停止以后重新打开时调用
        
android  service:
    组件状态：
       Started:	Android的应用程序组件，如活动，通过startService()启动了服务，则服务是Started状态。
                  一旦启动，服务可以在后台无限期运行，即使启动它的组件已经被销毁。
       Bound:	当Android的应用程序 组件 通过  bindService()绑定了服务，则服务是Bound状态。
                Bound状态的服务提供了一个客户服务器接口来允许组件与服务进行交互，如发送请求，获取结果，甚至通过IPC来进行跨进程通信。

    组件接口：
      onStartCommand()	其他组件(如活动)通过调用 startService() 来请求启动服务时，系统调用该方法。如果你实现该方法，你有责任在工作完成时通过stopSelf()或者stopService()方法来停止服务。
      onBind	当其他组件想要通过bindService()来绑定服务时，系统调用该方法。如果你实现该方法，你需要返回IBinder对象来提供一个接口，以便客户来与服务通信。你必须实现该方法，如果你不允许绑定，则直接返回null。
      onUnbind()	当客户中断所有服务发布的特殊接口时，系统调用该方法。
      onRebind()	当新的客户端与服务连接，且此前它已经通过onUnbind(Intent)通知断开连接时，系统调用该方法。
      onCreate()	当服务通过onStartCommand()和onBind()被第一次创建的时候，系统调用该方法。该调用要求执行一次性安装。
      onDestroy()	当服务不再有用或者被销毁时，系统调用该方法。你的服务需要实现该方法来清理任何资源，如线程，已注册的监听器，接收器等。
    
    注册服务：
        <service android:name=".MyService" />               ->           AndroidManifest.xml
    调用服务中的方法：
        在activity中：
          // Method to start the service
            public void startService(View view) {
                startService(new Intent(getBaseContext(), MyService.class));
            }
          // Method to stop the service
            public void stopService(View view) {
                stopService(new Intent(getBaseContext(), MyService.class));
            }
            
            
android  brodcast:
      广播接收器需要实现为BroadcastReceiver类的子类，并重写onReceive()方法来接收以Intent对象为参数的消息。
      注册广播接收机；
      产生广播意图(intent)；
      


//   重点 
android content provider内容提供者： 
      内容提供者组件通过请求从一个应用程序向其他的应用程序提供数据。
      这些请求由类 ContentResolver 的方法来处理。
      内容提供者可以使用不同的方式来存储数据。
      数据可以被存放在数据库，文件，甚至是网络

      









//   .XML file is for presnt  and  findViewById(R.id.xxx)  is for bounding of object
http://blog.csdn.net/lmj623565791/article/details/37970961/
http://blog.csdn.net/lmj623565791/article/details/42628537/
https://github.com/amap-demo/android-map-fragment/blob/master/app/src/main/java/com/amap/android_map_fragment/FragmentBase.java


1. Android如何用代码重复加载同一个xml,  
    用LayoutInflater多次inflate该xml文件即可。
    View v1 = LayoutInflater.from(context).inflate(R.layout.XXX, null);
    View v2 = LayoutInflater.from(context).inflate(R.layout.XXX, null);
    这里修改v2内容是不会改变v1的  ???  
    ???-------- change by findViewById  what will happen , point to one.
     -> textureMapView = (TextureMapView) getView().findViewById(R.id.map);  ->  idetify by getView()
    






